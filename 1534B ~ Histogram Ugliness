#include<bits/stdc++.h>
using namespace std;

using       ll          =       long long int;
using       ull         =       unsigned long long int;

#define     all(x)              x.begin(), x.end()
#define     rall(x)             x.rbegin(), x.rend() 

#define     in                  insert
#define     pb                  push_back
#define     ff                  first
#define     ss                  second
#define     mp                  make_pair
#define     ub                  upper_bound
#define     lb                  lower_bound

#define     endl                "\n"
#define     nl                  printf("\n")
#define     YES                 printf("YES\n")
#define     NO                  printf("NO\n")
#define     Yes                 printf("Yes\n")
#define     No                  printf("No\n")
#define     debug(x)            cout << "Debug of " << #x << ": " << x << endl;


bool        odd(ll num)         { return ((num & 1) == 1);  }
bool        even(ll num)        { return ((num & 1) == 0);  }
ll          sum(ll n)           { return ( (n*(n+1)) / 2 ); }
ll          ceil(ll a,ll b)     { return ( (a+(b-1)) / b ); }

//          extra               Extra Template (Pair, Set, Vector)
//          pairsort            to sort the second element of pair
//          reas                rearranging the digits of a number in ASCENDING order
//          bfs                 Breadth First Search    O( Vertex + Edge )
//          bigmod              BigMod   O( (log m) 2 log n )
//          bipartite_bfs       Bipartite Graph OR Bicolorable Graph Using BFS
//          bipartite_dfs       Bipartite Graph OR Bicolorable Graph Using DFS
//          bitmasking          Bitmasking
//          combination         Combination
//          dfs                 Depth First Search    O( Vertex + Edge )
//          divisor             Divisor Calculation from 1 to N     O(n log n)
//          divisor_sum         Sum of Divisors Calculation from 1 to N     O(n log n)
//          rede                rearranging the digits of a number in DESCENDING order
//          gcd                 GCD & LCM (Euclidean Algorithm)
//          isprime             IsPrime  O( n / 2 ) 
//          lcsubstring         LengthOfLCSubstring
//          sieve               Sieve    O( n * log(log(n)) )
//          sumofdigits         sum the digits of a number

//                              Dynamic_Programming
//          mindifference       Minimum difference of two different subsets sum   O(size of array X half of sum)


void InputOutput()
{
    #ifndef ONLINE_JUDGE
    freopen("E:/Programming File/input.txt", "r", stdin);
    freopen("E:/Programming File/output.txt", "w", stdout);
    #endif

    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}


void solve()
{
    int n; cin >> n;

    int a[n];

    for(int i = 0; i < n; i++)
        cin >> a[i];

    ll cnt, ans;
    cnt = ans = 0;

    for(int i = 0; i < n-1; i++)
    {
        if(i == 0)
        {
            if(a[i+1] < a[i])
            {
                cnt += a[i]-a[i+1];
                a[i] = a[i+1];
            }
        }
        else
        {
            if(a[i-1] < a[i] and a[i+1] < a[i])
            {
                cnt += a[i]-max(a[i-1], a[i+1]);
                a[i] = max(a[i-1], a[i+1]);
            }
        }
    }

    for(int i = 0; i < n-2; i++)
    {
        if(i == 0)
        {
            if(a[i] == a[i+1] and a[i] > a[i+2])
            {
                cnt += 2*(a[i]-a[i+2]);
                a[i] = a[i+1] = a[i+2];
            }
        }
        else
        {
            if(a[i] == a[i+1] and a[i-1] < a[i] and a[i+2] < a[i])
            {
                cnt += 2*(a[i]-max(a[i-1], a[i+2]));
                a[i] = a[i+1] = max(a[i-1], a[i+2]);
            }
        }
    }

    for(int i = 0; i < n; i++)
    {
        if(i == 0 or i == n-1)
            ans += a[i];
        else
        {
            if(a[i] > a[i-1])
                ans += a[i]-a[i-1];

            if(a[i] > a[i+1])
                ans += a[i]-a[i+1];
        }
    }

    ans += cnt;

    cout << ans << endl;
}

int main()
{
    InputOutput();

    int t = 1;

    cin >> t;

    for( int test_case = 1; test_case <= t; test_case++ )
    {
        //cout << "Case " << test_case << ": ";
        solve();
    }

    return 0;
}
