#include<bits/stdc++.h>
using namespace std;

using       ll          =       long long int;
using       ull         =       unsigned long long int;

#define     all(x)              x.begin(), x.end()
#define     rall(x)             x.rbegin(), x.rend() 

#define     in                  insert
#define     pb                  push_back
#define     ff                  first
#define     ss                  second
#define     mp                  make_pair
#define     ub                  upper_bound
#define     lb                  lower_bound

#define     endl                "\n"
#define     nl                  printf("\n")
#define     YES                 cout << "YES" << endl;
#define     NO                  cout << "NO" << endl;
#define     Yes                 printf("Yes\n")
#define     No                  printf("No\n")
#define     debug(x)            cout << "Debug of " << #x << ": " << x << endl;


bool        odd(ll num)         { return ((num & 1) == 1);  }
bool        even(ll num)        { return ((num & 1) == 0);  }
ll          sum(ll n)           { return ( (n*(n+1)) / 2 ); }
ll          ceil(ll a,ll b)     { return ( (a+(b-1)) / b ); }

//          extra               Extra Template (Pair, Set, Vector)
//          pairsort            to sort the second element of pair
//          reas                rearranging the digits of a number in ASCENDING order
//          bfs                 Breadth First Search    O( Vertex + Edge )
//          bigmod              BigMod   O( (log m) 2 log n )
//          bipartite_bfs       Bipartite Graph OR Bicolorable Graph Using BFS
//          bipartite_dfs       Bipartite Graph OR Bicolorable Graph Using DFS
//          bitmasking          Bitmasking
//          combination         Combination
//          dfs                 Depth First Search    O( Vertex + Edge )
//          divisor             Divisor Calculation from 1 to N     O(n log n)
//          divisor_sum         Sum of Divisors Calculation from 1 to N     O(n log n)
//          rede                rearranging the digits of a number in DESCENDING order
//          gcd                 GCD & LCM (Euclidean Algorithm)
//          isprime             IsPrime  O( n / 2 ) 
//          lcsubstring         LengthOfLCSubstring
//          sieve               Sieve    O( n * log(log(n)) )
//          sumofdigits         sum the digits of a number

//                              Dynamic_Programming
//          mindifference       Minimum difference of two different subsets sum   O(size of array X half of sum)


void InputOutput()
{
    #ifndef ONLINE_JUDGE
    freopen("E:/Programming File/input.txt", "r", stdin);
    freopen("E:/Programming File/output.txt", "w", stdout);
    #endif

    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}


void solve()
{
    int n, m; cin >> n >> m;

    int r, c;
    vector<string> a;
    string temp;
    bool chk = true;

    for(int i = 0; i < n; i++)
    {
        cin >> temp;
        a.pb(temp);

        for(int j = 0; j < m; j++)
        {
            if(chk == true and temp[j] != '.')
            {
                r = i;
                c = j;
                chk = false;
            }

            if(chk == false)
                break;
        }
    }

    char ch;

    if(chk == true)
        ch = 'R';
    else
    {
        if( (even(r) and even(c)) or (odd(r) and odd(c)) )
            ch = a[r][c];
        else
            ch = a[r][c] == 'R'? 'W': 'R';
    }

    for(int i = 0; i < m; i++)
    {
        if(i == 0)
            a[0][0] = ch;
        else
        {
            if(a[0][i] != '.')
            {
                if(a[0][i] == a[0][i-1])
                {
                    NO;
                    return;
                }
            }
            else
                a[0][i] = a[0][i-1] == 'R'? 'W': 'R';
        }
    }

    for(int i = 1; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(j == 0)
            {
                if(a[i][j] != '.')
                {
                    if(a[i][j] == a[i-1][j])
                    {
                        NO;
                        return;
                    }
                }
                else
                    a[i][j] = a[i-1][j] == 'R'? 'W': 'R';
            }
            else
            {
                if(a[i][j] != '.')
                {
                    if(a[i][j] == a[i][j-1])
                    {
                        NO;
                        return;
                    }
                }
                else
                    a[i][j] = a[i][j-1] == 'R'? 'W': 'R';
            }
        }
    }

    YES;

    for(int i = 0; i < n; i++)
        cout << a[i] << endl; 
}

int main()
{
    InputOutput();

    int t = 1;

    cin >> t;

    for( int test_case = 1; test_case <= t; test_case++ )
    {
        //cout << "Case " << test_case << ": ";
        solve();
    }

    return 0;
}
